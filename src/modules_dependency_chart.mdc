# 模块依赖图表 (MDC)

> **重要说明**: 本文档描述了geometry-survivor项目的模块划分和依赖关系。当对任何模块进行修改时，必须同步更新此文档以保持一致性。

## 模块概览

```mermaid
graph TB
    subgraph "Core Modules 核心模块"
        G[globals 全局模块]
        SC[scenes 场景模块]
    end
    
    subgraph "Game Logic 游戏逻辑"
        E[entities 实体模块]
        EQ[equipment 装备模块]
    end
    
    subgraph "Presentation 表现层"
        UI[ui 界面模块]
    end
    
    G --> E
    G --> EQ
    G --> UI
    G --> SC
    E --> EQ
    E --> UI
    EQ --> UI
    SC --> E
    SC --> EQ
    SC --> UI
```

## 详细模块说明

### 1. globals - 全局模块
**职责**: 提供全局服务和跨模块通信
**路径**: `src/globals/`

**子模块**:
- `event_bus.gd` - 事件总线，负责模块间松耦合通信
- `game_manager.gd` - 游戏状态管理器
- `constants.gd` - 全局常量定义
- `credit_manager.gd` - 积分/货币管理
- `damage_number_pool.gd` - 伤害数字对象池
- `math_utils.gd` - 数学工具函数
- `physics_optimizer.gd` - 物理优化工具

**依赖**: 无（基础模块）
**被依赖**: entities, equipment, ui, scenes

### 2. entities - 实体模块
**职责**: 游戏中所有可交互实体的定义和行为
**路径**: `src/entities/`

```mermaid
graph TB
    subgraph "entities 实体模块"
        A[actor.gd 基础行为者]
        P[player/ 玩家实体]
        EN[enemies/ 敌人实体]
    end
    
    A --> P
    A --> EN
    
    subgraph "player/"
        P1[player.gd 玩家控制器]
    end
    
    subgraph "enemies/"
        EB[enemy_base.gd 敌人基类]
        ES[enemy_spawner.gd 敌人生成器]
        EM[types/enemy_melee.gd 近战敌人]
        ER[types/enemy_ranged.gd 远程敌人]
        ESP[types/enemy_special.gd 特殊敌人]
    end
    
    EB --> EM
    EB --> ER
    EB --> ESP
```

**依赖**: globals (EventBus, GameManager)
**被依赖**: equipment, ui

### 3. equipment - 装备模块
**职责**: 武器装备系统的实现
**路径**: `src/equipment/`

```mermaid
graph TB
    subgraph "equipment 装备模块"
        EB[equipment_base.gd 装备基类]
        EM[equipment_manager.gd 装备管理器]
        ER[equipment_resource.gd 装备资源]
        PB[projectile_base.gd 投射物基类]
    end
    
    subgraph "具体装备实现"
        F[fist/ 拳击装备]
        P[pistol/ 手枪装备] 
        B[bomb/ 炸弹装备]
    end
    
    subgraph "资源定义"
        RES[resources/ 装备资源定义]
    end
    
    EB --> F
    EB --> P
    EB --> B
    ER --> RES
    PB --> F
    PB --> P
    PB --> B
```

**依赖**: globals (EventBus), entities (Player)
**被依赖**: ui

### 4. ui - 界面模块
**职责**: 用户界面显示和交互
**路径**: `src/ui/`

**组件**:
- `health_bar.gd` - 血量条显示
- `credits_display.gd` - 积分显示
- `equipment_ui.gd` - 装备界面
- `equipment_slot.gd` - 装备槽位
- `game_over.gd` - 游戏结束界面
- `performance_monitor.gd` - 性能监控显示

**依赖**: globals (EventBus, GameManager), entities (Player), equipment (EquipmentManager)
**被依赖**: 无

### 5. scenes - 场景模块
**职责**: 游戏场景的组织和管理
**路径**: `src/scenes/`

```mermaid
graph TB
    subgraph "scenes 场景模块"
        M[main/ 主场景]
        C[common/ 通用组件]
    end
    
    subgraph "main/"
        MS[main.gd 主场景控制器]
        MT[main.tscn 主场景文件]
    end
    
    subgraph "common/"
        PR[prefabs/ 预制件]
        AS[assets/ 资源]
    end
    
    subgraph "prefabs/"
        B[bullet.gd 子弹]
        DN[damage_number.gd 伤害数字]
        DNP[damage_number_pool.gd 伤害数字池]
    end
```

**依赖**: globals, entities, equipment, ui
**被依赖**: 无

## 依赖关系说明

### 核心依赖原则
1. **单向依赖**: 高层模块依赖低层模块，避免循环依赖
2. **事件驱动**: 通过EventBus实现松耦合通信
3. **最小依赖**: 模块只依赖必要的接口，不依赖具体实现

### 依赖层级
```mermaid
graph TB
    L1[Layer 1: globals 基础层]
    L2[Layer 2: entities, equipment 逻辑层]
    L3[Layer 3: ui, scenes 表现层]
    
    L1 --> L2
    L2 --> L3
```

### 通信模式
- **globals → 其他模块**: 提供服务和事件总线
- **entities ↔ equipment**: 通过EventBus和直接引用交互
- **所有模块 → ui**: 通过EventBus发送UI更新事件
- **scenes**: 作为容器组合其他模块

## 修改指南

### 添加新模块时
1. 确定模块层级和依赖关系
2. 更新本MDC文档的模块图表
3. 在对应的依赖关系中添加新模块
4. 确保不违反单向依赖原则

### 修改现有模块时
1. 评估依赖关系是否发生变化
2. 如有变化，更新MDC中的相关图表
3. 检查是否引入循环依赖
4. 更新模块说明中的职责描述

### 重构模块时
1. 先在MDC中设计新的模块结构
2. 确保新结构符合依赖原则
3. 按照MDC进行代码重构
4. 完成后验证实际结构与MDC一致

---

**最后更新**: 2024年 (请在修改模块时更新此日期)
**维护者**: 开发团队
**版本**: 1.0 